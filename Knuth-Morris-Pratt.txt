#include<iostream>
#include<sstream>
#include<iterator>
#include<vector>
#include<set>
#include<map>
#include<cassert>
#include<cstring>
#include<cstdlib>
#include<list>
#include<string>
#include<algorithm>
#include<utility>
#include<queue>
#include<cstdio>
#include<ctype.h>
#include<cmath>

//macros..

int compare( const void*a,const void *b ){ return *(int *)a - *(int *)b; }//For Quicksort in C
int Compare(char a,char b){return a > b ? 1 : 0 ;} // Reverse Laxicographical Order using sort(Ascii Value)

#define all(s) (s).begin(),(s).end()
#define present(set,element) ( set.find(element) != set.end() )
#define pb push_back
#define pf push_front
#define mp make_pair
#define vi vector <int>
#define vll vector <long long>
#define vc vector <char>
#define vs vector <string>
#define vpi vector < pair <int,int> >
#define sclld(x) scanf("%lld",&x);
#define ps(str)  printf("%s",str);
#define pc(ch)  printf("%c",ch);
#define pi(i)  printf("%d",i);
#define nl printf("\n");
#define ms(arr) memset(arr,0,sizeof(arr));
#define ms1(arr) memset(arr,1,sizeof(arr));
#define msn1(arr) memset(arr,-1,sizeof(arr));
#define ms2d(array,m,n) memset(array, -1, sizeof(array[0][0]) * m * n);

typedef long long ll;

#define INF 1000000007

using namespace std;


void ComputeLPSarray(char *pat,int M,int *lps)
{

    int j=0;
    lps[0]=0;
    int i=1;
    while(i<M)
    {

        if(pat[i]==pat[j])
        {
            j++;
            lps[i]=j;
            i++;
        }
        else
        {
            if(j != 0)
            {
                j = lps[j-1];
            }
            else
            {
                lps[i]=0;
                i++;
            }
        }

    }

}


void KMPsearch( char *text , char *pattern )
{


    int M = strlen(pattern);
    int N = strlen(text);
    int lps[M];

    ComputeLPSarray(pattern,M,lps);
    int i=0,j=0;

    while(i < N)
    {


        if( pattern[j] == text[i])
        {
            i++;
            j++;
        }

       if(j == M)
        {

            cout << "Pattern Found at "<<i-j<<"th Index\n";
            j = lps[j-1];
        }

        else if(i<N && pattern[j] != text[i] )
        {
            if(j!=0)
            {
                j=lps[j-1];

            }
            else
            {
                i++;
            }
        }
    }
}


int main()
{
    char *text = "ABABDABACDABABCABAB";
    char *pattern = "ABABCABAB";
    KMPsearch(text,pattern);
    return 0;
}

