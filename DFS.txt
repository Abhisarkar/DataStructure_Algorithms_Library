
vi vec[10];
bool visit[10];

void dfs( int s )
{
    cout << s <<" ";
    visit[s] = true;
    int i;
    for( i = 0 ; i < vec[s].size() ; i++  )
    {
          if( visit[ vec[s][i] ] == false )
          {
              dfs(vec[s][i] );
          }
    }
}


int main()
{
    int nodes,edges;
    cin >> nodes >> edges;
    int i,j;
    for(i=0;i<edges;i++)
    {
        int x,y;
        cin >> x >> y;
        vec[x].pb(y);
        vec[y].pb(x);//undirected graph.
    }
    //Adjacency List..
    /*for(i=1;i<=nodes;i++)
    {
        int c=0;

        //cout << "neighbours of " << i << " node " << vec[i].size();nl;
        cout << "Adjacency list of node : " << i ;
        for( j=0;j<vec[i].size();j++ )
        {
            if( j == vec[i].size() - 1 )
            {
                cout <<" "<<vec[i][j];
                c=1;
            }
            else
            {
                c=1;
                cout <<" "<< vec[i][j] << " --> ";
            }



        }
            if(c==1)
            {nl;continue;}
            else
                printf(" Leaf node");
        nl;
    }*/
    
    cout << "Depth First Search : ";
    dfs(1);

    return 0;


}
